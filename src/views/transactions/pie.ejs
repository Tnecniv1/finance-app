<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Camemberts - Finance App</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            background: white;
            padding: 20px 30px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            color: #333;
            font-size: 28px;
        }

        .nav-buttons {
            display: flex;
            gap: 10px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            text-decoration: none;
            display: inline-block;
            transition: all 0.3s;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5568d3;
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: #e0e7ff;
            color: #667eea;
        }

        .btn-secondary:hover {
            background: #c7d2fe;
        }

        /* Filters Section */
        .filters-container {
            background: white;
            padding: 20px 30px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .filters-row {
            display: flex;
            gap: 30px;
            align-items: center;
            flex-wrap: wrap;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .filter-group label {
            font-weight: 600;
            color: #333;
            font-size: 14px;
        }

        .filter-buttons {
            display: flex;
            gap: 10px;
        }

        .filter-btn {
            padding: 8px 16px;
            border: 2px solid #e0e7ff;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            color: #667eea;
            transition: all 0.3s;
            font-weight: 500;
        }

        .filter-btn:hover {
            border-color: #667eea;
            background: #f5f7ff;
        }

        .filter-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        /* Stats Cards */
        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .stat-card h3 {
            color: #666;
            font-size: 14px;
            margin-bottom: 10px;
        }

        .stat-card .value {
            font-size: 28px;
            font-weight: bold;
        }

        .stat-card.positive .value {
            color: #10b981;
        }

        .stat-card.negative .value {
            color: #ef4444;
        }

        .stat-card.neutral .value {
            color: #667eea;
        }

        /* Charts Container */
        .charts-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .chart-card {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .chart-card h2 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
            font-size: 20px;
        }

        .chart-wrapper {
            position: relative;
            height: 400px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .no-data {
            text-align: center;
            color: #999;
            font-style: italic;
            padding: 40px;
        }

        /* Legend */
        .legend-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #e5e7eb;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .legend-color {
            width: 20px;
            height: 20px;
            border-radius: 4px;
            flex-shrink: 0;
        }

        .legend-text {
            font-size: 14px;
            color: #333;
            flex-grow: 1;
        }

        .legend-value {
            font-weight: bold;
            color: #667eea;
        }

        /* Volatility Section */
        .volatility-card {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .volatility-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .volatility-header h2 {
            color: #333;
            font-size: 24px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .tendency-badge {
            padding: 8px 16px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
        }

        .tendency-badge.creation {
            background: #d1fae5;
            color: #065f46;
        }

        .tendency-badge.destruction {
            background: #fee2e2;
            color: #991b1b;
        }

        .tendency-badge.stagnation {
            background: #e5e7eb;
            color: #374151;
        }

        /* ============================================ */
        /* NOUVELLE SECTION COMPACTE POUR LA VOLATILITÉ */
        /* ============================================ */
        
        /* Légende compacte sur une ligne */
        .volatility-legend-compact {
            display: flex;
            align-items: center;
            gap: 30px;
            margin-bottom: 25px;
            padding: 15px 20px;
            background: #f9fafb;
            border-radius: 10px;
            flex-wrap: wrap;
        }

        .legend-item-compact {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .legend-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            flex-shrink: 0;
        }

        .legend-dot.revenus {
            background-color: #10b981;
        }

        .legend-dot.depenses {
            background-color: #ef4444;
        }

        .legend-dot.profit {
            background-color: #8b5cf6;
        }

        .legend-item-compact span {
            font-size: 14px;
            color: #374151;
        }

        .legend-item-compact strong {
            font-size: 16px;
            font-weight: 700;
            color: #111827;
        }

        /* Gauge container */
        .gauge-container {
            width: 100%;
            max-width: 1000px;
            position: relative;
            margin: 0 auto;
        }

        .gauge-scale {
            display: flex;
            justify-content: space-between;
            width: 100%;
            padding-bottom: 10px;
        }

        .scale-label {
            font-size: 14px;
            color: #666;
            font-weight: 600;
        }

        .gauge-bar {
            width: 100%;
            height: 8px;
            background: linear-gradient(to right, #ef4444 0%, #e5e7eb 50%, #10b981 100%);
            border-radius: 4px;
            position: relative;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
        }

        .gauge-zero-line {
            position: absolute;
            left: 50%;
            top: -10px;
            bottom: -10px;
            width: 3px;
            background: #1f2937;
            transform: translateX(-50%);
        }

        .gauge-cursors {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        /* Curseurs simplifiés (petits cercles uniquement) */
        .cursor {
            position: absolute;
            top: 50%;
            transform: translate(-50%, -50%);
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .cursor-marker {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            border: 3px solid white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }

        .cursor-revenus .cursor-marker {
            background: #10b981;
        }

        .cursor-depenses .cursor-marker {
            background: #ef4444;
        }

        .cursor-profit .cursor-marker {
            background: #8b5cf6;
        }

        .volatility-info {
            margin-top: 30px;
            padding: 20px;
            background: #f9fafb;
            border-radius: 10px;
            border-left: 4px solid #667eea;
        }

        .volatility-info p {
            margin: 0;
            color: #374151;
            font-size: 14px;
            line-height: 1.6;
        }

        @media (max-width: 768px) {
            .volatility-legend-compact {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            
            .charts-container {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>📊 Analyses Financières</h1>
            <div class="nav-buttons">
                <a href="/transactions" class="btn btn-primary">← Retour aux transactions</a>
            </div>
        </div>

        <!-- Filters -->
        <div class="filters-container">
            <div class="filters-row">
                <!-- Period Filter -->
                <div class="filter-group">
                    <label>Période d'analyse :</label>
                    <div class="filter-buttons">
                        <button class="filter-btn" data-filter="period" data-value="daily">Journalier</button>
                        <button class="filter-btn" data-filter="period" data-value="weekly">Hebdomadaire</button>
                        <button class="filter-btn active" data-filter="period" data-value="monthly">Mensuel</button>
                        <button class="filter-btn" data-filter="period" data-value="yearly">Annuel</button>
                    </div>
                </div>

                <!-- Mode Filter -->
                <div class="filter-group">
                    <label>Mode d'affichage :</label>
                    <div class="filter-buttons">
                        <button class="filter-btn active" data-filter="mode" data-value="moyenne">Moyenne</button>
                        <button class="filter-btn" data-filter="mode" data-value="volatilite">Volatilité</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="stats-container" id="statsContainer">
            <div class="stat-card neutral">
                <h3>Total Revenus</h3>
                <div class="value" id="statRevenus">0 €</div>
            </div>
            <div class="stat-card neutral">
                <h3>Total Dépenses</h3>
                <div class="value" id="statDepenses">0 €</div>
            </div>
            <div class="stat-card neutral">
                <h3>Solde Net</h3>
                <div class="value" id="statSolde">0 €</div>
            </div>
        </div>

        <!-- Charts Container (Moyenne) -->
        <div class="charts-container" id="chartsContainer">
            <!-- Revenus Chart -->
            <div class="chart-card">
                <h2>📈 Répartition des Revenus</h2>
                <div class="chart-wrapper">
                    <canvas id="revenusChart"></canvas>
                </div>
                <div class="legend-container" id="revenusLegend"></div>
            </div>

            <!-- Depenses Chart -->
            <div class="chart-card">
                <h2>📉 Répartition des Dépenses</h2>
                <div class="chart-wrapper">
                    <canvas id="depensesChart"></canvas>
                </div>
                <div class="legend-container" id="depensesLegend"></div>
            </div>
        </div>

        <!-- Volatility Container -->
        <div class="volatility-card" id="volatilityContainer" style="display: none;">
            <div class="volatility-header">
                <h2>📊 Analyse de Volatilité</h2>
                <div class="tendency-badge" id="tendencyBadge">
                    <span id="tendencyText">Calculant...</span>
                </div>
            </div>

            <!-- NOUVELLE LÉGENDE COMPACTE -->
            <div class="volatility-legend-compact">
                <div class="legend-item-compact">
                    <span class="legend-dot revenus"></span>
                    <span>Revenus</span>
                    <strong id="valueRevenus">0%</strong>
                </div>
                <div class="legend-item-compact">
                    <span class="legend-dot depenses"></span>
                    <span>Dépenses</span>
                    <strong id="valueDepenses">0%</strong>
                </div>
                <div class="legend-item-compact">
                    <span class="legend-dot profit"></span>
                    <span>Profit</span>
                    <strong id="valueProfit">0%</strong>
                </div>
            </div>

            <!-- Gauge -->
            <div class="gauge-container">
                <div class="gauge-scale">
                    <span class="scale-label">-50%</span>
                    <span class="scale-label">-25%</span>
                    <span class="scale-label">0%</span>
                    <span class="scale-label">+25%</span>
                    <span class="scale-label">+50%</span>
                </div>

                <div class="gauge-bar">
                    <div class="gauge-zero-line"></div>

                    <!-- Curseurs simplifiés (juste des points) -->
                    <div class="gauge-cursors">
                        <div class="cursor cursor-revenus" id="cursorRevenus">
                            <div class="cursor-marker"></div>
                        </div>
                        <div class="cursor cursor-depenses" id="cursorDepenses">
                            <div class="cursor-marker"></div>
                        </div>
                        <div class="cursor cursor-profit" id="cursorProfit">
                            <div class="cursor-marker"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Info -->
            <div class="volatility-info">
                <p>
                    <strong>📌 Comment lire ce graphique :</strong><br>
                    La volatilité mesure le taux de croissance moyen de vos finances entre les périodes. 
                    Un pourcentage positif indique une tendance à la hausse, négatif à la baisse. 
                    Le profit combine les variations de revenus et dépenses pour montrer l'évolution nette.
                </p>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Current filter state
        let currentPeriod = 'monthly';
        let currentMode = 'moyenne';

        // Raw data
        const transactions = <%- JSON.stringify(transactions) %>;
        const categoriesRevenus = <%- JSON.stringify(categoriesRevenus) %>;
        const categoriesDepenses = <%- JSON.stringify(categoriesDepenses) %>;

        let revenusChart = null;
        let depensesChart = null;

        // Filter button handlers
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const filterType = this.dataset.filter;
                const value = this.dataset.value;

                // Update active state
                document.querySelectorAll(`[data-filter="${filterType}"]`).forEach(b => {
                    b.classList.remove('active');
                });
                this.classList.add('active');

                // Update filter
                if (filterType === 'period') {
                    currentPeriod = value;
                } else if (filterType === 'mode') {
                    currentMode = value;
                    toggleView();
                }

                // Refresh display
                updateDisplay();
            });
        });

        // Toggle between Moyenne and Volatilité views
        function toggleView() {
            const chartsContainer = document.getElementById('chartsContainer');
            const volatilityContainer = document.getElementById('volatilityContainer');

            if (currentMode === 'moyenne') {
                chartsContainer.style.display = 'grid';
                volatilityContainer.style.display = 'none';
            } else {
                chartsContainer.style.display = 'none';
                volatilityContainer.style.display = 'block';
            }
        }

        // Format currency
        function formatCurrency(amount) {
            return new Intl.NumberFormat('fr-FR', {
                style: 'currency',
                currency: 'EUR'
            }).format(amount);
        }

        // Generate color palette
        function generateColor(index, total) {
            const hue = (index * 360 / total) % 360;
            return `hsl(${hue}, 70%, 60%)`;
        }

        // Update stats
        function updateStats() {
            const filteredTransactions = getFilteredTransactions();

            let totalRevenus = 0;
            let totalDepenses = 0;

            filteredTransactions.forEach(t => {
                if (t.nature === 'revenu') {
                    totalRevenus += parseFloat(t.montant);
                } else {
                    totalDepenses += parseFloat(t.montant);
                }
            });

            const solde = totalRevenus - totalDepenses;

            document.getElementById('statRevenus').textContent = formatCurrency(totalRevenus);
            document.getElementById('statDepenses').textContent = formatCurrency(totalDepenses);
            document.getElementById('statSolde').textContent = formatCurrency(solde);

            // Update card classes
            const soldeCard = document.getElementById('statSolde').parentElement;
            soldeCard.classList.remove('positive', 'negative', 'neutral');
            if (solde > 0) {
                soldeCard.classList.add('positive');
            } else if (solde < 0) {
                soldeCard.classList.add('negative');
            } else {
                soldeCard.classList.add('neutral');
            }
        }

        // Get filtered transactions based on period
        function getFilteredTransactions() {
            const now = new Date();
            let startDate = new Date();

            switch(currentPeriod) {
                case 'daily':
                    startDate.setDate(now.getDate() - 1);
                    break;
                case 'weekly':
                    startDate.setDate(now.getDate() - 7);
                    break;
                case 'monthly':
                    startDate.setMonth(now.getMonth() - 1);
                    break;
                case 'yearly':
                    startDate.setFullYear(now.getFullYear() - 1);
                    break;
            }

            return transactions.filter(t => new Date(t.date) >= startDate);
        }

        // Prepare chart data
        function prepareChartData(nature) {
            const filteredTransactions = getFilteredTransactions();
            const categoryData = {};

            filteredTransactions.forEach(t => {
                if (t.nature === nature) {
                    const catName = t.categorie_nom || 'Non catégorisé';
                    categoryData[catName] = (categoryData[catName] || 0) + parseFloat(t.montant);
                }
            });

            const labels = Object.keys(categoryData);
            const data = Object.values(categoryData);
            const backgroundColors = labels.map((_, i) => generateColor(i, labels.length));

            return { labels, data, backgroundColors };
        }

        // Update legend
        function updateLegend(containerId, labels, data, colors) {
            const container = document.getElementById(containerId);
            container.innerHTML = '';

            const total = data.reduce((a, b) => a + b, 0);

            labels.forEach((label, index) => {
                const value = data[index];
                const percentage = ((value / total) * 100).toFixed(1);

                const item = document.createElement('div');
                item.className = 'legend-item';
                item.innerHTML = `
                    <div class="legend-color" style="background-color: ${colors[index]}"></div>
                    <div class="legend-text">${label}</div>
                    <div class="legend-value">${formatCurrency(value)} (${percentage}%)</div>
                `;
                container.appendChild(item);
            });
        }

        // Update display
        function updateDisplay() {
            if (currentMode === 'moyenne') {
                updateCharts();
            } else {
                updateVolatility();
            }
        }

        // Update charts
        function updateCharts() {
            // Destroy existing charts
            if (revenusChart) {
                revenusChart.destroy();
            }
            if (depensesChart) {
                depensesChart.destroy();
            }

            // Prepare data
            const revenusData = prepareChartData('revenu');
            const depensesData = prepareChartData('depense');

            // Create Revenus chart
            const revenusCtx = document.getElementById('revenusChart').getContext('2d');

            if (revenusData.data.length === 0) {
                revenusCtx.canvas.parentElement.innerHTML = '<div class="no-data">Aucune donnée de revenus pour cette période</div>';
            } else {
                revenusChart = new Chart(revenusCtx, {
                    type: 'pie',
                    data: {
                        labels: revenusData.labels,
                        datasets: [{
                            data: revenusData.data,
                            backgroundColor: revenusData.backgroundColors,
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.parsed || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = ((value / total) * 100).toFixed(1);
                                        return `${label}: ${formatCurrency(value)} (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                });

                updateLegend('revenusLegend', revenusData.labels, revenusData.data, revenusData.backgroundColors);
            }

            const depensesCtx = document.getElementById('depensesChart').getContext('2d');

            if (depensesData.data.length === 0) {
                depensesCtx.canvas.parentElement.innerHTML = '<div class="no-data">Aucune donnée de dépenses pour cette période</div>';
            } else {
                depensesChart = new Chart(depensesCtx, {
                    type: 'pie',
                    data: {
                        labels: depensesData.labels,
                        datasets: [{
                            data: depensesData.data,
                            backgroundColor: depensesData.backgroundColors,
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.parsed || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = ((value / total) * 100).toFixed(1);
                                        return `${label}: ${formatCurrency(value)} (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                });

                updateLegend('depensesLegend', depensesData.labels, depensesData.data, depensesData.backgroundColors);
            }

            // Update stats
            updateStats();
        }

        // ============================================
        // CALCUL DE VOLATILITÉ CORRIGÉ
        // ============================================
        function calculateVolatility(period) {
            // Récupérer les 12 derniers points de données
            const dataPoints = getDataPointsByPeriod(period);
            
            console.log('=== VOLATILITY DEBUG (CORRECTED) ===');
            console.log('Period:', period);
            console.log('Data points:', dataPoints);
            
            // Filtrer les points avec des valeurs > 0 pour éviter division par zéro
            const validPoints = dataPoints.filter(p => p.revenus > 0 && p.depenses > 0);
            
            if (validPoints.length < 2) {
                console.log('Pas assez de données valides pour calculer la volatilité');
                return { revenus: 0, depenses: 0, profit: 0 };
            }
            
            // Calculer les taux de croissance entre périodes consécutives
            const revenusRates = [];
            const depensesRates = [];
            
            for (let i = 1; i < validPoints.length; i++) {
                const prevRev = validPoints[i-1].revenus;
                const currRev = validPoints[i].revenus;
                const prevDep = validPoints[i-1].depenses;
                const currDep = validPoints[i].depenses;
                
                // Formule : Taux de croissance = ((valeur_actuelle - valeur_précédente) / valeur_précédente) * 100
                const revRate = ((currRev - prevRev) / prevRev) * 100;
                const depRate = ((currDep - prevDep) / prevDep) * 100;
                
                revenusRates.push(revRate);
                depensesRates.push(depRate);
                
                console.log(`Point ${i-1}→${i}:`);
                console.log(`  Revenus: ${prevRev.toFixed(2)} → ${currRev.toFixed(2)} = ${revRate.toFixed(2)}%`);
                console.log(`  Dépenses: ${prevDep.toFixed(2)} → ${currDep.toFixed(2)} = ${depRate.toFixed(2)}%`);
            }
            
            console.log('Taux de croissance Revenus:', revenusRates);
            console.log('Taux de croissance Dépenses:', depensesRates);
            
            // Calculer la MOYENNE des taux de croissance (volatilité)
            const avgRevenus = revenusRates.length > 0 
                ? revenusRates.reduce((sum, rate) => sum + rate, 0) / revenusRates.length
                : 0;
                
            const avgDepenses = depensesRates.length > 0 
                ? depensesRates.reduce((sum, rate) => sum + rate, 0) / depensesRates.length
                : 0;
            
            // Profit = croissance des revenus - croissance des dépenses
            // (Plus les revenus croissent et moins les dépenses croissent, meilleur est le profit)
            const avgProfit = avgRevenus - avgDepenses;
            
            console.log('Volatilité Moyenne Revenus:', avgRevenus.toFixed(2) + '%');
            console.log('Volatilité Moyenne Dépenses:', avgDepenses.toFixed(2) + '%');
            console.log('Volatilité Profit (Revenus - Dépenses):', avgProfit.toFixed(2) + '%');
            console.log('====================================');
            
            return {
                revenus: avgRevenus,
                depenses: avgDepenses,
                profit: avgProfit
            };
        }

        // Get data points grouped by period
        function getDataPointsByPeriod(period) {
            const points = [];
            const now = new Date();
            
            for (let i = 11; i >= 0; i--) {
                const { start, end } = getDateRangeForPoint(i, period, now);
                
                let revenus = 0;
                let depenses = 0;
                
                transactions.forEach(t => {
                    const tDate = new Date(t.date);
                    if (tDate >= start && tDate <= end) {
                        if (t.nature === 'revenu') {
                            revenus += parseFloat(t.montant);
                        } else {
                            depenses += parseFloat(t.montant);
                        }
                    }
                });
                
                points.push({ revenus, depenses });
            }
            
            return points;
        }

        // Get date range for a specific point
        function getDateRangeForPoint(index, period, referenceDate = new Date()) {
            const start = new Date(referenceDate);
            const end = new Date(referenceDate);
            
            switch(period) {
                case 'daily':
                    start.setDate(referenceDate.getDate() - index);
                    start.setHours(0, 0, 0, 0);
                    end.setDate(referenceDate.getDate() - index);
                    end.setHours(23, 59, 59, 999);
                    break;
                case 'weekly':
                    const weekStart = new Date(referenceDate);
                    weekStart.setDate(referenceDate.getDate() - (index * 7));
                    weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 1);
                    weekStart.setHours(0, 0, 0, 0);
                    start.setTime(weekStart.getTime());
                    end.setTime(weekStart.getTime());
                    end.setDate(weekStart.getDate() + 6);
                    end.setHours(23, 59, 59, 999);
                    break;
                case 'monthly':
                    start.setMonth(referenceDate.getMonth() - index);
                    start.setDate(1);
                    start.setHours(0, 0, 0, 0);
                    end.setMonth(referenceDate.getMonth() - index + 1);
                    end.setDate(0);
                    end.setHours(23, 59, 59, 999);
                    break;
                case 'yearly':
                    start.setFullYear(referenceDate.getFullYear() - index);
                    start.setMonth(0, 1);
                    start.setHours(0, 0, 0, 0);
                    end.setFullYear(referenceDate.getFullYear() - index);
                    end.setMonth(11, 31);
                    end.setHours(23, 59, 59, 999);
                    break;
            }
            
            return { start, end };
        }

        // Update volatility gauge
        function updateVolatility() {
            const volatility = calculateVolatility(currentPeriod);
            
            // Fonction pour convertir un taux (-50% à +50%) en position (0% à 100%)
            function getPosition(rate) {
                // Limiter le taux entre -50% et +50%
                const clampedRate = Math.max(-50, Math.min(50, rate));
                // Convertir en position: -50% → 0%, 0% → 50%, +50% → 100%
                return ((clampedRate + 50) / 100) * 100;
            }
            
            const posRevenus = getPosition(volatility.revenus);
            const posDepenses = getPosition(volatility.depenses);
            const posProfit = getPosition(volatility.profit);
            
            // Mettre à jour les positions des curseurs
            document.getElementById('cursorRevenus').style.left = posRevenus + '%';
            document.getElementById('cursorDepenses').style.left = posDepenses + '%';
            document.getElementById('cursorProfit').style.left = posProfit + '%';
            
            // Mettre à jour les valeurs affichées
            document.getElementById('valueRevenus').textContent = volatility.revenus.toFixed(2) + '%';
            document.getElementById('valueDepenses').textContent = volatility.depenses.toFixed(2) + '%';
            document.getElementById('valueProfit').textContent = volatility.profit.toFixed(2) + '%';
            
            console.log('Positions des curseurs:', { 
                revenus: posRevenus + '%', 
                depenses: posDepenses + '%', 
                profit: posProfit + '%' 
            });
            
            // Mettre à jour le badge de tendance
            const tendencyBadge = document.getElementById('tendencyBadge');
            const tendencyText = document.getElementById('tendencyText');
            
            tendencyBadge.classList.remove('creation', 'destruction', 'stagnation');
            
            if (volatility.profit > 0.1) {
                tendencyBadge.classList.add('creation');
                tendencyText.textContent = 'Tendance à la création';
            } else if (volatility.profit < -0.1) {
                tendencyBadge.classList.add('destruction');
                tendencyText.textContent = 'Tendance à la destruction';
            } else {
                tendencyBadge.classList.add('stagnation');
                tendencyText.textContent = 'Tendance à la stagnation';
            }
        }

        // Initialize
        updateDisplay();
    </script>
</body>
</html>
