<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Progression - Analyse - Fidess</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            background: white;
            padding: 20px 30px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            color: #333;
            font-size: 28px;
        }

        .nav-buttons {
            display: flex;
            gap: 10px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            text-decoration: none;
            display: inline-block;
            transition: all 0.3s;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5568d3;
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: #e0e7ff;
            color: #667eea;
        }

        .btn-secondary:hover {
            background: #c7d2fe;
        }

        /* Filters Section */
        .filters-container {
            background: white;
            padding: 20px 30px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .filters-row {
            display: flex;
            gap: 30px;
            align-items: center;
            flex-wrap: wrap;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .filter-group label {
            font-weight: 600;
            color: #333;
            font-size: 14px;
        }

        .filter-buttons {
            display: flex;
            gap: 10px;
        }

        .filter-btn {
            padding: 8px 16px;
            border: 2px solid #e0e7ff;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            color: #667eea;
            transition: all 0.3s;
            font-weight: 500;
        }

        .filter-btn:hover {
            border-color: #667eea;
            background: #f5f7ff;
        }

        .filter-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        /* Stats Cards */
        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .stat-card h3 {
            color: #666;
            font-size: 14px;
            margin-bottom: 10px;
        }

        .stat-card .value {
            font-size: 28px;
            font-weight: bold;
        }

        .stat-card.positive .value {
            color: #10b981;
        }

        .stat-card.negative .value {
            color: #ef4444;
        }

        .stat-card.neutral .value {
            color: #667eea;
        }

        /* Charts Container */
        .charts-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .chart-card {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .chart-card h2 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
            font-size: 20px;
        }

        .chart-wrapper {
            position: relative;
            height: 400px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .no-data {
            text-align: center;
            color: #999;
            font-style: italic;
            padding: 40px;
        }

        /* Legend */
        .legend-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #e5e7eb;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .legend-color {
            width: 20px;
            height: 20px;
            border-radius: 4px;
            flex-shrink: 0;
        }

        .legend-text {
            display: flex;
            flex-direction: column;
            gap: 2px;
            flex: 1;
        }

        .legend-label {
            font-size: 14px;
            font-weight: 600;
            color: #333;
        }

        .legend-amount {
            font-size: 12px;
            color: #666;
        }

        .legend-percent {
            font-size: 12px;
            color: #999;
        }

        @media (max-width: 1100px) {
            .charts-container {
                grid-template-columns: 1fr;
            }
        }

        /* Volatility Gauge Styles */
        .volatility-container {
            margin-bottom: 20px;
        }

        .volatility-card {
            background: white;
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .volatility-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 40px;
        }

        .volatility-header h2 {
            color: #333;
            font-size: 24px;
            margin: 0;
        }

        .tendency-badge {
            padding: 12px 24px;
            border-radius: 25px;
            font-weight: 600;
            font-size: 16px;
            transition: all 0.3s;
        }

        .tendency-badge.creation {
            background: #d1fae5;
            color: #065f46;
        }

        .tendency-badge.destruction {
            background: #fee2e2;
            color: #991b1b;
        }

        .tendency-badge.stagnation {
            background: #e0e7ff;
            color: #3730a3;
        }

        .gauge-wrapper {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 140px 40px 60px 40px;
        }

        .gauge-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            width: 100%;
            max-width: 1000px;
            position: relative;
        }

        .gauge-scale {
            display: flex;
            justify-content: space-between;
            width: 100%;
            padding-bottom: 10px;
        }

        .scale-label {
            font-size: 14px;
            color: #666;
            font-weight: 600;
        }

        .gauge-bar {
            width: 100%;
            height: 8px;
            background: linear-gradient(to right, #ef4444 0%, #e5e7eb 50%, #10b981 100%);
            border-radius: 4px;
            position: relative;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
        }

        .gauge-zero-line {
            position: absolute;
            left: 50%;
            top: -10px;
            bottom: -10px;
            width: 3px;
            background: #1f2937;
            transform: translateX(-50%);
        }

        .gauge-cursors {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        /* ============================================ */
        /* NOUVELLE SECTION COMPACTE POUR LA VOLATILITÉ */
        /* ============================================ */
        
        /* Légende compacte sur une ligne */
        .volatility-legend-compact {
            display: flex;
            align-items: center;
            gap: 30px;
            margin-bottom: 25px;
            padding: 15px 20px;
            background: #f9fafb;
            border-radius: 10px;
            flex-wrap: wrap;
        }

        .legend-item-compact {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .legend-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            flex-shrink: 0;
        }

        .legend-dot.revenus {
            background-color: #10b981;
        }

        .legend-dot.depenses {
            background-color: #ef4444;
        }

        .legend-dot.profit {
            background-color: #8b5cf6;
        }

        .legend-item-compact span {
            font-size: 14px;
            color: #374151;
        }

        .legend-item-compact strong {
            font-size: 16px;
            font-weight: 700;
            color: #111827;
        }

        /* Curseurs simplifiés (petits cercles uniquement) */
        .cursor {
            position: absolute;
            top: 50%;
            transform: translate(-50%, -50%);
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .cursor-marker {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            border: 3px solid white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }

        .cursor-revenus .cursor-marker {
            background: #10b981;
        }

        .cursor-depenses .cursor-marker {
            background: #ef4444;
        }

        .cursor-profit .cursor-marker {
            background: #8b5cf6;
        }

        .volatility-legend {
            margin-top: 40px;
            padding: 20px;
            background: #f9fafb;
            border-radius: 10px;
            border-left: 4px solid #667eea;
        }

        .volatility-legend p {
            margin: 0 0 10px 0;
            color: #333;
        }

        .volatility-legend ul {
            margin: 0;
            padding-left: 20px;
            color: #666;
        }

        .volatility-legend li {
            margin: 5px 0;
        }
    </style>
</head>
<body>
    <%- include('../partials/navbar-simple', { currentPage: 'progression', user: user }) %>

    <%- include('../partials/progression-header', { currentView: currentView, stats: stats }) %>

    <div class="container">

    <div class="container">
<body>
    <div class="container">


        <!-- Filters -->
        <div class="filters-container">
            <div class="filters-row">
                <div class="filter-group">
                    <label>Mode</label>
                    <div class="filter-buttons">
                        <button class="filter-btn active" data-filter="mode" data-value="moyenne">Moyenne</button>
                        <button class="filter-btn" data-filter="mode" data-value="volatilite">Volatilité</button>
                    </div>
                </div>

                <div class="filter-group">
                    <label>Période</label>
                    <div class="filter-buttons">
                        <button class="filter-btn" data-filter="period" data-value="weekly">Hebdomadaire</button>
                        <button class="filter-btn active" data-filter="period" data-value="monthly">Mensuel</button>
                        <button class="filter-btn" data-filter="period" data-value="yearly">Annuel</button>
                    </div>
                </div>
            </div>
        </div>


        <!-- Charts (Moyenne mode) -->
        <div class="charts-container" id="chartsContainer">
            <!-- Revenus Pie Chart -->
            <div class="chart-card">
                <h2>💰 Revenus par Catégorie</h2>
                <div class="chart-wrapper">
                    <canvas id="revenusChart"></canvas>
                </div>
                <div class="legend-container" id="revenusLegend"></div>
            </div>

            <!-- Depenses Pie Chart -->
            <div class="chart-card">
                <h2>💸 Dépenses par Catégorie</h2>
                <div class="chart-wrapper">
                    <canvas id="depensesChart"></canvas>
                </div>
                <div class="legend-container" id="depensesLegend"></div>
            </div>
        </div>

        <!-- Volatility Gauge (Volatilité mode) -->
        <div class="volatility-container" id="volatilityContainer" style="display: none;">
            <div class="volatility-card">
                <div class="volatility-header">
                    <h2>📊 Analyse de Volatilité</h2>
                    <div class="tendency-badge" id="tendencyBadge">
                        <span id="tendencyText">Tendance à la stagnation</span>
                    </div>
                </div>

                <div class="gauge-wrapper">
                    <!-- NOUVELLE LÉGENDE COMPACTE -->
                    <div class="volatility-legend-compact">
                        <div class="legend-item-compact">
                            <span class="legend-dot revenus"></span>
                            <span>Revenus</span>
                            <strong id="valueRevenus">0%</strong>
                        </div>
                        <div class="legend-item-compact">
                            <span class="legend-dot depenses"></span>
                            <span>Dépenses</span>
                            <strong id="valueDepenses">0%</strong>
                        </div>
                        <div class="legend-item-compact">
                            <span class="legend-dot profit"></span>
                            <span>Profit</span>
                            <strong id="valueProfit">0%</strong>
                        </div>
                    </div>

                    <!-- Vertical gauge -->
                    <div class="gauge-container">
                        <!-- Scale markers -->
                        <div class="gauge-scale">
                            <span class="scale-label">-50%</span>
                            <span class="scale-label">-25%</span>
                            <span class="scale-label">0%</span>
                            <span class="scale-label">+25%</span>
                            <span class="scale-label">+50%</span>
                        </div>

                        <!-- Vertical bar -->
                        <div class="gauge-bar">
                            <div class="gauge-zero-line"></div>

                            <!-- Curseurs simplifiés (juste des points) -->
                            <div class="gauge-cursors">
                                <div class="cursor cursor-revenus" id="cursorRevenus">
                                    <div class="cursor-marker"></div>
                                </div>
                                <div class="cursor cursor-depenses" id="cursorDepenses">
                                    <div class="cursor-marker"></div>
                                </div>
                                <div class="cursor cursor-profit" id="cursorProfit">
                                    <div class="cursor-marker"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Current filter state
        let currentPeriod = 'monthly';  // Default to monthly to match the active button
        let currentMode = 'moyenne';  // Default to moyenne

        // Raw data
        const transactions = <%- JSON.stringify(transactions) %>;
        const categoriesRevenus = <%- JSON.stringify(categoriesRevenus) %>;
        const categoriesDepenses = <%- JSON.stringify(categoriesDepenses) %>;

        let revenusChart = null;
        let depensesChart = null;

        // Filter button handlers
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const filterType = this.dataset.filter;
                const value = this.dataset.value;

                // Update active state
                document.querySelectorAll(`[data-filter="${filterType}"]`).forEach(b => {
                    b.classList.remove('active');
                });
                this.classList.add('active');

                // Update filter
                if (filterType === 'period') {
                    currentPeriod = value;
                } else if (filterType === 'mode') {
                    currentMode = value;
                    toggleView();
                }

                // Refresh display
                updateDisplay();
            });
        });

        // Toggle between Moyenne and Volatilité views
        function toggleView() {
            const chartsContainer = document.getElementById('chartsContainer');
            const volatilityContainer = document.getElementById('volatilityContainer');

            if (currentMode === 'moyenne') {
                chartsContainer.style.display = 'grid';
                volatilityContainer.style.display = 'none';
            } else {
                chartsContainer.style.display = 'none';
                volatilityContainer.style.display = 'block';
            }
        }

        // Update display based on current mode
        function updateDisplay() {
            if (currentMode === 'moyenne') {
                updateCharts();
            } else {
                updateVolatility();
            }
            updateStats();
        }

        // Format currency
        function formatCurrency(amount) {
            return new Intl.NumberFormat('fr-FR', {
                style: 'currency',
                currency: 'EUR'
            }).format(amount);
        }

        // Get date range based on period (last 12 points)
        function getDateRange(period) {
            const now = new Date();
            const start = new Date(now);

            switch(period) {
                case 'daily':
                    start.setDate(now.getDate() - 11);
                    break;
                case 'weekly':
                    start.setDate(now.getDate() - (11 * 7));
                    break;
                case 'monthly':
                    start.setMonth(now.getMonth() - 11);
                    break;
                case 'yearly':
                    start.setFullYear(now.getFullYear() - 11);
                    break;
            }

            start.setHours(0, 0, 0, 0);
            now.setHours(23, 59, 59, 999);

            return { start, end: now };
        }

        // Calculate the actual number of periods available in the transaction history
        function getAvailablePeriodsCount(period) {
            if (transactions.length === 0) return 1; // Éviter division par 0
            
            // Trouver la transaction la plus ancienne
            const oldestTransaction = transactions.reduce((oldest, t) => {
                const tDate = new Date(t.date);
                return tDate < new Date(oldest.date) ? t : oldest;
            });
            
            const oldestDate = new Date(oldestTransaction.date);
            const now = new Date();
            
            let periodsCount = 0;
            
            switch(period) {
                case 'daily':
                    // Nombre de jours entre la plus vieille transaction et aujourd'hui
                    const daysDiff = Math.floor((now - oldestDate) / (1000 * 60 * 60 * 24));
                    periodsCount = Math.min(daysDiff + 1, 12);
                    break;
                case 'weekly':
                    // Nombre de semaines
                    const weeksDiff = Math.floor((now - oldestDate) / (1000 * 60 * 60 * 24 * 7));
                    periodsCount = Math.min(weeksDiff + 1, 12);
                    break;
                case 'monthly':
                    // Nombre de mois
                    const monthsDiff = (now.getFullYear() - oldestDate.getFullYear()) * 12 
                                     + (now.getMonth() - oldestDate.getMonth());
                    periodsCount = Math.min(monthsDiff + 1, 12);
                    break;
                case 'yearly':
                    // Nombre d'années
                    const yearsDiff = now.getFullYear() - oldestDate.getFullYear();
                    periodsCount = Math.min(yearsDiff + 1, 12);
                    break;
            }
            
            return Math.max(periodsCount, 1); // Au minimum 1 période
        }

        // Get transactions for a specific period index (0 = current period, 1 = previous period, etc.)
        function getTransactionsForPeriod(periodIndex, period) {
            const now = new Date();
            const start = new Date(now);
            const end = new Date(now);

            switch(period) {
                case 'daily':
                    start.setDate(now.getDate() - periodIndex);
                    start.setHours(0, 0, 0, 0);
                    end.setDate(now.getDate() - periodIndex);
                    end.setHours(23, 59, 59, 999);
                    break;
                case 'weekly':
                    // Calculer le début de la semaine pour la période spécifiée
                    const weekStart = new Date(now);
                    weekStart.setDate(now.getDate() - (periodIndex * 7));
                    weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 1); // Lundi
                    weekStart.setHours(0, 0, 0, 0);
                    start.setTime(weekStart.getTime());
                    end.setTime(weekStart.getTime());
                    end.setDate(weekStart.getDate() + 6); // Dimanche
                    end.setHours(23, 59, 59, 999);
                    break;
                case 'monthly':
                    start.setMonth(now.getMonth() - periodIndex);
                    start.setDate(1);
                    start.setHours(0, 0, 0, 0);
                    end.setMonth(now.getMonth() - periodIndex + 1);
                    end.setDate(0); // Dernier jour du mois
                    end.setHours(23, 59, 59, 999);
                    break;
                case 'yearly':
                    start.setFullYear(now.getFullYear() - periodIndex);
                    start.setMonth(0, 1);
                    start.setHours(0, 0, 0, 0);
                    end.setFullYear(now.getFullYear() - periodIndex);
                    end.setMonth(11, 31);
                    end.setHours(23, 59, 59, 999);
                    break;
            }

            return transactions.filter(t => {
                const tDate = new Date(t.date);
                return tDate >= start && tDate <= end;
            });
        }

        // Filter transactions by date range
        function filterTransactionsByPeriod(transactions, period) {
            const { start, end } = getDateRange(period);
            return transactions.filter(t => {
                const tDate = new Date(t.date);
                return tDate >= start && tDate <= end;
            });
        }

        // Process revenus data - Calcul des moyennes sur 12 périodes
        function processRevenusData(period) {
            // Calculer le nombre réel de périodes disponibles
            const availablePeriods = getAvailablePeriodsCount(period);
            
            // Étape 1 : Pour chaque catégorie, initialiser un tableau pour stocker les totaux
            const categoryData = {};
            const categoryMap = {};
            
            categoriesRevenus.forEach(cat => {
                categoryData[cat.id] = [];  // Tableau pour stocker les totaux
                categoryMap[cat.id] = cat.nom;
            });
            
            // Étape 2 : Pour chacune des périodes disponibles (max 12)
            for (let i = 0; i < availablePeriods; i++) {
                const periodTransactions = getTransactionsForPeriod(i, period);
                
                // Initialiser à 0 pour cette période
                Object.keys(categoryData).forEach(catId => {
                    categoryData[catId][i] = 0;
                });
                
                // Calculer le TOTAL par catégorie pour cette période
                periodTransactions.forEach(t => {
                    if (t.nature === 'revenu' && t.sous_categorie_revenu && t.sous_categorie_revenu.categorie_revenu_id) {
                        const categorieId = t.sous_categorie_revenu.categorie_revenu_id;
                        if (categoryData[categorieId] !== undefined) {
                            categoryData[categorieId][i] += parseFloat(t.montant);
                        }
                    }
                });
            }
            
            // Étape 3 : Calculer la MOYENNE sur les périodes réellement disponibles
            const labels = [];
            const data = [];
            const colors = [
                '#10b981', '#3b82f6', '#8b5cf6', '#ec4899', 
                '#f59e0b', '#06b6d4', '#84cc16', '#f97316',
                '#14b8a6', '#6366f1', '#a855f7', '#ef4444'
            ];
            const backgroundColors = [];
            
            let colorIndex = 0;
            Object.keys(categoryData).forEach(catId => {
                const totals = categoryData[catId];  // Les totaux des périodes
                const sum = totals.reduce((a, b) => a + b, 0);
                const average = sum / availablePeriods;  // Moyenne sur les périodes réelles
                
                if (average > 0) {
                    labels.push(categoryMap[catId]);
                    data.push(average);
                    backgroundColors.push(colors[colorIndex % colors.length]);
                    colorIndex++;
                }
            });
            
            return { labels, data, backgroundColors };
        }

        // Process depenses data - Calcul des moyennes sur les périodes réellement disponibles
        function processDepensesData(period) {
            // Calculer le nombre réel de périodes disponibles
            const availablePeriods = getAvailablePeriodsCount(period);
            
            // Étape 1 : Pour chaque catégorie, initialiser un tableau pour stocker les totaux
            const categoryData = {};
            const categoryMap = {};

            categoriesDepenses.forEach(cat => {
                categoryData[cat.id] = [];  // Tableau pour stocker les totaux
                categoryMap[cat.id] = cat.nom;
            });

            // Étape 2 : Pour chacune des périodes disponibles (max 12)
            for (let i = 0; i < availablePeriods; i++) {
                const periodTransactions = getTransactionsForPeriod(i, period);
                
                // Initialiser à 0 pour cette période
                Object.keys(categoryData).forEach(catId => {
                    categoryData[catId][i] = 0;
                });
                
                // Calculer le TOTAL par catégorie pour cette période
                periodTransactions.forEach(t => {
                    if (t.nature === 'depense' && t.sous_categorie_depense && t.sous_categorie_depense.categorie_depense_id) {
                        const categorieId = t.sous_categorie_depense.categorie_depense_id;
                        if (categoryData[categorieId] !== undefined) {
                            categoryData[categorieId][i] += parseFloat(t.montant);
                        }
                    }
                });
            }

            // Étape 3 : Calculer la MOYENNE sur les périodes réellement disponibles
            const labels = [];
            const data = [];
            const colors = [
                '#ef4444', '#f97316', '#f59e0b', '#eab308',
                '#84cc16', '#22c55e', '#10b981', '#14b8a6',
                '#06b6d4', '#0ea5e9', '#3b82f6', '#6366f1',
                '#8b5cf6'
            ];
            const backgroundColors = [];

            let colorIndex = 0;
            Object.keys(categoryData).forEach(catId => {
                const totals = categoryData[catId];  // Les totaux des périodes
                const sum = totals.reduce((a, b) => a + b, 0);
                const average = sum / availablePeriods;  // Moyenne sur les périodes réelles
                
                if (average > 0) {
                    labels.push(categoryMap[catId]);
                    data.push(average);
                    backgroundColors.push(colors[colorIndex % colors.length]);
                    colorIndex++;
                }
            });

            return { labels, data, backgroundColors };
        }

        // Update stats
        function updateStats() {
            const { start, end } = getDateRange(currentPeriod);
            
            let totalRevenus = 0;
            let totalDepenses = 0;

            transactions.forEach(t => {
                const tDate = new Date(t.date);
                if (tDate >= start && tDate <= end) {
                    if (t.nature === 'revenu') {
                        totalRevenus += parseFloat(t.montant);
                    } else {
                        totalDepenses += parseFloat(t.montant);
                    }
                }
            });

            document.getElementById('total-revenus').textContent = formatCurrency(totalRevenus);
            document.getElementById('total-depenses').textContent = formatCurrency(totalDepenses);
            
            const solde = totalRevenus - totalDepenses;
            const soldeElement = document.getElementById('solde');
            soldeElement.textContent = formatCurrency(solde);
            
            const soldeCard = soldeElement.closest('.stat-card');
            soldeCard.classList.remove('positive', 'negative', 'neutral');
            if (solde > 0) {
                soldeCard.classList.add('positive');
            } else if (solde < 0) {
                soldeCard.classList.add('negative');
            } else {
                soldeCard.classList.add('neutral');
            }
        }

        // Update legend
        function updateLegend(containerId, labels, data, colors) {
            const container = document.getElementById(containerId);
            container.innerHTML = '';

            const total = data.reduce((sum, val) => sum + val, 0);

            labels.forEach((label, index) => {
                const percentage = ((data[index] / total) * 100).toFixed(1);
                
                const item = document.createElement('div');
                item.className = 'legend-item';

                const colorBox = document.createElement('div');
                colorBox.className = 'legend-color';
                colorBox.style.backgroundColor = colors[index];

                const textContainer = document.createElement('div');
                textContainer.className = 'legend-text';

                const labelSpan = document.createElement('span');
                labelSpan.className = 'legend-label';
                labelSpan.textContent = label;

                const amountSpan = document.createElement('span');
                amountSpan.className = 'legend-amount';
                amountSpan.textContent = formatCurrency(data[index]);

                const percentSpan = document.createElement('span');
                percentSpan.className = 'legend-percent';
                percentSpan.textContent = `${percentage}%`;

                textContainer.appendChild(labelSpan);
                textContainer.appendChild(amountSpan);
                textContainer.appendChild(percentSpan);

                item.appendChild(colorBox);
                item.appendChild(textContainer);
                container.appendChild(item);
            });
        }

        // Update charts
        function updateCharts() {
            const revenusData = processRevenusData(currentPeriod);
            const depensesData = processDepensesData(currentPeriod);

            // Update Revenus Chart
            if (revenusChart) {
                revenusChart.destroy();
            }

            const revenusCtx = document.getElementById('revenusChart').getContext('2d');
            
            if (revenusData.data.length === 0) {
                revenusCtx.canvas.parentElement.innerHTML = '<div class="no-data">Aucune donnée de revenus pour cette période</div>';
            } else {
                revenusChart = new Chart(revenusCtx, {
                    type: 'pie',
                    data: {
                        labels: revenusData.labels,
                        datasets: [{
                            data: revenusData.data,
                            backgroundColor: revenusData.backgroundColors,
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.parsed || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = ((value / total) * 100).toFixed(1);
                                        return `${label}: ${formatCurrency(value)} (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                });

                updateLegend('revenusLegend', revenusData.labels, revenusData.data, revenusData.backgroundColors);
            }

            // Update Depenses Chart
            if (depensesChart) {
                depensesChart.destroy();
            }

            const depensesCtx = document.getElementById('depensesChart').getContext('2d');

            if (depensesData.data.length === 0) {
                depensesCtx.canvas.parentElement.innerHTML = '<div class="no-data">Aucune donnée de dépenses pour cette période</div>';
            } else {
                depensesChart = new Chart(depensesCtx, {
                    type: 'pie',
                    data: {
                        labels: depensesData.labels,
                        datasets: [{
                            data: depensesData.data,
                            backgroundColor: depensesData.backgroundColors,
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.parsed || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = ((value / total) * 100).toFixed(1);
                                        return `${label}: ${formatCurrency(value)} (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                });

                updateLegend('depensesLegend', depensesData.labels, depensesData.data, depensesData.backgroundColors);
            }

            // Update stats
            updateStats();
        }

        // Calculate volatility (average growth rate over periods)
        function calculateVolatility(period) {
            // Get 12 data points
            const dataPoints = getDataPointsByPeriod(period);
            
            console.log('=== VOLATILITY DEBUG ===');
            console.log('Period:', period);
            console.log('Data points:', dataPoints);
            
            // Calculate growth rates between consecutive points
            const revenusRates = [];
            const depensesRates = [];
            
            for (let i = 1; i < dataPoints.length; i++) {
                const prevRev = dataPoints[i-1].revenus;
                const currRev = dataPoints[i].revenus;
                const prevDep = dataPoints[i-1].depenses;
                const currDep = dataPoints[i].depenses;
                
                // Growth rate = (current - previous) / previous * 100
                if (prevRev > 0) {
                    const revRate = ((currRev - prevRev) / prevRev) * 100;
                    revenusRates.push(revRate);
                    console.log(`Revenus ${i-1}→${i}: ${prevRev.toFixed(2)} → ${currRev.toFixed(2)} = ${revRate.toFixed(2)}%`);
                }
                if (prevDep > 0) {
                    const depRate = ((currDep - prevDep) / prevDep) * 100;
                    depensesRates.push(depRate);
                    console.log(`Dépenses ${i-1}→${i}: ${prevDep.toFixed(2)} → ${currDep.toFixed(2)} = ${depRate.toFixed(2)}%`);
                }
            }
            
            console.log('Revenus rates:', revenusRates);
            console.log('Dépenses rates:', depensesRates);
            
            // Calculate average rates
            const avgRevenus = revenusRates.length > 0 
                ? revenusRates.reduce((a, b) => a + b, 0) / revenusRates.length 
                : 0;
            const avgDepenses = depensesRates.length > 0 
                ? depensesRates.reduce((a, b) => a + b, 0) / depensesRates.length 
                : 0;
            
            // Profit volatility = revenus volatility - depenses volatility
            const avgProfit = avgRevenus - avgDepenses;
            
            console.log('Average Revenus:', avgRevenus.toFixed(2) + '%');
            console.log('Average Dépenses:', avgDepenses.toFixed(2) + '%');
            console.log('Average Profit:', avgProfit.toFixed(2) + '%');
            
            return {
                revenus: avgRevenus,
                depenses: avgDepenses,
                profit: avgProfit
            };
        }

        // Get data points grouped by period
        function getDataPointsByPeriod(period) {
            const points = [];
            const now = new Date();
            
            for (let i = 11; i >= 0; i--) {
                const { start, end } = getDateRangeForPoint(i, period, now);
                
                let revenus = 0;
                let depenses = 0;
                
                transactions.forEach(t => {
                    const tDate = new Date(t.date);
                    if (tDate >= start && tDate <= end) {
                        if (t.nature === 'revenu') {
                            revenus += parseFloat(t.montant);
                        } else {
                            depenses += parseFloat(t.montant);
                        }
                    }
                });
                
                points.push({ revenus, depenses });
            }
            
            return points;
        }

        // Get date range for a specific point
        function getDateRangeForPoint(index, period, referenceDate = new Date()) {
            const start = new Date(referenceDate);
            const end = new Date(referenceDate);
            
            switch(period) {
                case 'daily':
                    start.setDate(referenceDate.getDate() - index);
                    start.setHours(0, 0, 0, 0);
                    end.setDate(referenceDate.getDate() - index);
                    end.setHours(23, 59, 59, 999);
                    break;
                case 'weekly':
                    const weekStart = new Date(referenceDate);
                    weekStart.setDate(referenceDate.getDate() - (index * 7));
                    weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 1);
                    weekStart.setHours(0, 0, 0, 0);
                    start.setTime(weekStart.getTime());
                    end.setTime(weekStart.getTime());
                    end.setDate(weekStart.getDate() + 6);
                    end.setHours(23, 59, 59, 999);
                    break;
                case 'monthly':
                    start.setMonth(referenceDate.getMonth() - index);
                    start.setDate(1);
                    start.setHours(0, 0, 0, 0);
                    end.setMonth(referenceDate.getMonth() - index + 1);
                    end.setDate(0);
                    end.setHours(23, 59, 59, 999);
                    break;
                case 'yearly':
                    start.setFullYear(referenceDate.getFullYear() - index);
                    start.setMonth(0, 1);
                    start.setHours(0, 0, 0, 0);
                    end.setFullYear(referenceDate.getFullYear() - index);
                    end.setMonth(11, 31);
                    end.setHours(23, 59, 59, 999);
                    break;
            }
            
            return { start, end };
        }

        // Update volatility gauge
        function updateVolatility() {
            const volatility = calculateVolatility(currentPeriod);
            
            // Update cursor positions (horizontal: -50% to +50% range)
            // -50% = 0% (left), 0% = 50% (center), +50% = 100% (right)
            
            function getPosition(rate) {
                // Clamp between -50% and +50%
                const clampedRate = Math.max(-50, Math.min(50, rate));
                // Convert to position percentage (0% to 100%)
                return ((clampedRate + 50) / 1);
            }
            
            const posRevenus = getPosition(volatility.revenus);
            const posDepenses = getPosition(volatility.depenses);
            const posProfit = getPosition(volatility.profit);
            
            // Update cursors (horizontal positioning)
            document.getElementById('cursorRevenus').style.left = posRevenus + '%';
            document.getElementById('cursorDepenses').style.left = posDepenses + '%';
            document.getElementById('cursorProfit').style.left = posProfit + '%';
            
            // Update values
            document.getElementById('valueRevenus').textContent = volatility.revenus.toFixed(2) + '%';
            document.getElementById('valueDepenses').textContent = volatility.depenses.toFixed(2) + '%';
            document.getElementById('valueProfit').textContent = volatility.profit.toFixed(2) + '%';
            
            // Debug log
            console.log('Volatility calculated:', volatility);
            console.log('Positions:', { revenus: posRevenus, depenses: posDepenses, profit: posProfit });
            
            // Update tendency badge
            const tendencyBadge = document.getElementById('tendencyBadge');
            const tendencyText = document.getElementById('tendencyText');
            
            tendencyBadge.classList.remove('creation', 'destruction', 'stagnation');
            
            if (volatility.profit > 0.1) {
                tendencyBadge.classList.add('creation');
                tendencyText.textContent = 'Tendance à la création';
            } else if (volatility.profit < -0.1) {
                tendencyBadge.classList.add('destruction');
                tendencyText.textContent = 'Tendance à la destruction';
            } else {
                tendencyBadge.classList.add('stagnation');
                tendencyText.textContent = 'Tendance à la stagnation';
            }
        }

        // Initialize
        updateDisplay();
    </script>
</body>
</html>

