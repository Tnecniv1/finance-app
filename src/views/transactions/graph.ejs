<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Graphiques - Finance App</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }

        .header h1 {
            color: #333;
            font-size: 24px;
        }

        .view-switcher {
            display: flex;
            gap: 10px;
        }

        .view-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s;
            text-decoration: none;
            display: inline-block;
        }

        .view-btn.active {
            background: #667eea;
            color: white;
        }

        .view-btn:not(.active) {
            background: #f0f0f0;
            color: #666;
        }

        .view-btn:not(.active):hover {
            background: #e0e0e0;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .stat-label {
            color: #666;
            font-size: 14px;
            margin-bottom: 5px;
        }

        .stat-value {
            font-size: 28px;
            font-weight: bold;
        }

        .stat-value.positive {
            color: #10b981;
        }

        .stat-value.negative {
            color: #ef4444;
        }

        .stat-value.neutral {
            color: #667eea;
        }

        .filters-section {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .filters-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 15px;
            color: #333;
        }

        .filters-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .filter-group label {
            font-size: 14px;
            color: #666;
            font-weight: 500;
        }

        .filter-group select,
        .filter-group input {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }

        .filter-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5568d3;
        }

        .btn-secondary {
            background: #f0f0f0;
            color: #666;
            text-decoration: none;
            display: inline-block;
        }

        .btn-secondary:hover {
            background: #e0e0e0;
        }

        .chart-container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: relative;
        }

        .chart-legend {
            position: absolute;
            top: 40px;
            left: 40px;
            background: rgba(255, 255, 255, 0.95);
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            z-index: 10;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .legend-item:last-child {
            margin-bottom: 0;
        }

        .legend-color {
            width: 20px;
            height: 3px;
            border-radius: 2px;
        }

        .legend-color.revenus {
            background: #10b981;
        }

        .legend-color.depenses {
            background: #ef4444;
        }

        .legend-color.profit {
            background: #8b5cf6;
        }

        .legend-label {
            font-weight: 600;
        }

        .legend-value {
            color: #666;
            margin-left: auto;
        }

        #transactionsChart {
            width: 100% !important;
            height: 500px !important;
        }

        .logout-btn {
            padding: 10px 20px;
            background: #ef4444;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-weight: 600;
            transition: all 0.3s;
        }

        .logout-btn:hover {
            background: #dc2626;
        }

        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                align-items: stretch;
            }

            .view-switcher {
                width: 100%;
            }

            .view-btn {
                flex: 1;
                text-align: center;
            }

            .chart-legend {
                position: static;
                margin-bottom: 20px;
            }

            #transactionsChart {
                height: 400px !important;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- En-t√™te avec navigation -->
        <div class="header">
            <h1>üìä Analyse Financi√®re</h1>
            <div class="view-switcher">
                <a href="/transactions" class="view-btn">üìã Vue Liste</a>
                <a href="/transactions/graph" class="view-btn active">üìà Vue Graphique</a>
            </div>
            <a href="/auth/logout" class="logout-btn">D√©connexion</a>
        </div>

        <!-- Statistiques -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-label">Solde Total</div>
                <div class="stat-value <%= solde >= 0 ? 'positive' : 'negative' %>">
                    <%= solde.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }) %>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Total Revenus</div>
                <div class="stat-value positive">
                    <%= totalRevenus.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }) %>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Total D√©penses</div>
                <div class="stat-value negative">
                    <%= totalDepenses.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }) %>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Nombre de Transactions</div>
                <div class="stat-value neutral">
                    <%= transactions.length %>
                </div>
            </div>
        </div>

        <!-- Filtres -->
        <div class="filters-section">
            <div class="filters-title">üîç Filtres et Tri</div>
            <form method="GET" action="/transactions/graph">
                <div class="filters-grid">
                    <div class="filter-group">
                        <label for="type">Type</label>
                        <select name="type" id="type">
                            <option value="">Tous</option>
                            <option value="revenu" <%= filters.type === 'revenu' ? 'selected' : '' %>>Revenus</option>
                            <option value="depense" <%= filters.type === 'depense' ? 'selected' : '' %>>D√©penses</option>
                        </select>
                    </div>

                    <div class="filter-group">
                        <label for="categorie">Cat√©gorie</label>
                        <select name="categorie" id="categorie">
                            <option value="">Toutes</option>
                            <% categories.forEach(cat => { %>
                                <option value="<%= cat.id %>" <%= filters.categorie == cat.id ? 'selected' : '' %>>
                                    <%= cat.nom %>
                                </option>
                            <% }); %>
                        </select>
                    </div>

                    <div class="filter-group">
                        <label for="date_debut">Date d√©but</label>
                        <input type="date" name="date_debut" id="date_debut" value="<%= filters.date_debut || '' %>">
                    </div>

                    <div class="filter-group">
                        <label for="date_fin">Date fin</label>
                        <input type="date" name="date_fin" id="date_fin" value="<%= filters.date_fin || '' %>">
                    </div>

                    <div class="filter-group">
                        <label for="sort">Trier par</label>
                        <select name="sort" id="sort">
                            <option value="date_desc" <%= filters.sort === 'date_desc' ? 'selected' : '' %>>Date (r√©cent)</option>
                            <option value="date_asc" <%= filters.sort === 'date_asc' ? 'selected' : '' %>>Date (ancien)</option>
                            <option value="montant_desc" <%= filters.sort === 'montant_desc' ? 'selected' : '' %>>Montant (√©lev√©)</option>
                            <option value="montant_asc" <%= filters.sort === 'montant_asc' ? 'selected' : '' %>>Montant (faible)</option>
                        </select>
                    </div>
                </div>

                <div class="filter-actions">
                    <button type="submit" class="btn btn-primary">Appliquer les filtres</button>
                    <a href="/transactions/graph" class="btn btn-secondary">R√©initialiser</a>
                </div>
            </form>
        </div>

        <!-- Graphique -->
        <div class="chart-container">
            <div class="chart-legend">
                <div class="legend-item">
                    <div class="legend-color revenus"></div>
                    <span class="legend-label">Revenus</span>
                    <span class="legend-value"><%= totalRevenus.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }) %></span>
                </div>
                <div class="legend-item">
                    <div class="legend-color depenses"></div>
                    <span class="legend-label">D√©penses</span>
                    <span class="legend-value"><%= Math.abs(totalDepenses).toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }) %></span>
                </div>
                <div class="legend-item">
                    <div class="legend-color profit"></div>
                    <span class="legend-label">Profit</span>
                    <span class="legend-value"><%= solde.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }) %></span>
                </div>
            </div>
            <canvas id="transactionsChart"></canvas>
        </div>
    </div>

    <script>
        // Pr√©parer les donn√©es pour Chart.js
        const transactions = <%- JSON.stringify(transactions) %>;
        
        // Trier les transactions par date
        transactions.sort((a, b) => new Date(a.date) - new Date(b.date));

        // Grouper les transactions par date
        const dataByDate = {};
        transactions.forEach(t => {
            const date = t.date.split('T')[0];
            if (!dataByDate[date]) {
                dataByDate[date] = { revenus: 0, depenses: 0, profit: 0 };
            }
            
            const montant = parseFloat(t.montant);
            if (t.type === 'revenu') {
                dataByDate[date].revenus += montant;
                dataByDate[date].profit += montant;
            } else {
                dataByDate[date].depenses += Math.abs(montant);
                dataByDate[date].profit -= Math.abs(montant);
            }
        });

        // Cr√©er des donn√©es cumulatives
        const dates = Object.keys(dataByDate).sort();
        let cumulativeRevenus = 0;
        let cumulativeDepenses = 0;
        let cumulativeProfit = 0;

        const chartData = {
            labels: dates.map(date => new Date(date).toLocaleDateString('fr-FR', { day: '2-digit', month: 'short', year: 'numeric' })),
            datasets: [
                {
                    label: 'Revenus',
                    data: dates.map(date => { cumulativeRevenus += dataByDate[date].revenus; return cumulativeRevenus; }),
                    borderColor: '#10b981',
                    backgroundColor: 'rgba(16, 185, 129, 0.1)',
                    borderWidth: 3,
                    tension: 0.4,
                    fill: false,
                    pointRadius: 4,
                    pointHoverRadius: 6
                },
                {
                    label: 'D√©penses',
                    data: dates.map(date => { cumulativeDepenses += dataByDate[date].depenses; return cumulativeDepenses; }),
                    borderColor: '#ef4444',
                    backgroundColor: 'rgba(239, 68, 68, 0.1)',
                    borderWidth: 3,
                    tension: 0.4,
                    fill: false,
                    pointRadius: 4,
                    pointHoverRadius: 6
                },
                {
                    label: 'Profit',
                    data: dates.map(date => { cumulativeProfit += dataByDate[date].profit; return cumulativeProfit; }),
                    borderColor: '#8b5cf6',
                    backgroundColor: 'rgba(139, 92, 246, 0.1)',
                    borderWidth: 3,
                    tension: 0.4,
                    fill: false,
                    pointRadius: 4,
                    pointHoverRadius: 6
                }
            ]
        };

        // Configurer et cr√©er le graphique
        const ctx = document.getElementById('transactionsChart').getContext('2d');
        new Chart(ctx, {
            type: 'line',
            data: chartData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: { mode: 'index', intersect: false },
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        padding: 12,
                        titleFont: { size: 14 },
                        bodyFont: { size: 13 },
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) label += ': ';
                                label += new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(context.parsed.y);
                                return label;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        grid: { display: false },
                        ticks: { maxRotation: 45, minRotation: 45, font: { size: 11 } }
                    },
                    y: {
                        beginAtZero: true,
                        grid: { color: 'rgba(0, 0, 0, 0.05)' },
                        ticks: {
                            callback: function(value) {
                                return new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR', minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(value);
                            },
                            font: { size: 12 }
                        }
                    }
                }
            }
        });
    </script>
</body>
</html>
