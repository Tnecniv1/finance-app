<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Graphiques - Finance App</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }

        .header h1 {
            color: #333;
            font-size: 24px;
        }

        .view-switcher {
            display: flex;
            gap: 10px;
        }

        .view-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s;
            text-decoration: none;
            display: inline-block;
        }

        .view-btn.active {
            background: #667eea;
            color: white;
        }

        .view-btn:not(.active) {
            background: #f0f0f0;
            color: #666;
        }

        .view-btn:not(.active):hover {
            background: #e0e0e0;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .stat-label {
            color: #666;
            font-size: 14px;
            margin-bottom: 5px;
        }

        .stat-value {
            font-size: 28px;
            font-weight: bold;
        }

        .stat-value.positive {
            color: #10b981;
        }

        .stat-value.negative {
            color: #ef4444;
        }

        .stat-value.neutral {
            color: #667eea;
        }

        .filters-section {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .filters-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 15px;
            color: #333;
        }

        .filters-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .filter-group label {
            font-size: 14px;
            color: #666;
            font-weight: 500;
        }

        .filter-group select,
        .filter-group input {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }

        .filter-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5568d3;
        }

        .btn-secondary {
            background: #f0f0f0;
            color: #666;
            text-decoration: none;
            display: inline-block;
        }

        .btn-secondary:hover {
            background: #e0e0e0;
        }

        /* ✨ NOUVEAU : Contrôles de période */
        .period-controls {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .period-controls-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 15px;
            color: #333;
        }

        .period-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            align-items: center;
        }

        .period-btn {
            padding: 10px 20px;
            border: 2px solid #667eea;
            background: white;
            color: #667eea;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s;
        }

        .period-btn.active {
            background: #667eea;
            color: white;
        }

        .period-btn:hover {
            background: #667eea;
            color: white;
        }

        .zoom-btn {
            padding: 10px 20px;
            border: 2px solid #10b981;
            background: white;
            color: #10b981;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s;
            margin-left: auto;
        }

        .zoom-btn.active {
            background: #10b981;
            color: white;
        }

        .zoom-btn:hover {
            background: #10b981;
            color: white;
        }

        .chart-container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: relative;
        }

        .chart-legend {
            position: absolute;
            top: 40px;
            left: 40px;
            background: rgba(255, 255, 255, 0.95);
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            z-index: 10;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .legend-item:last-child {
            margin-bottom: 0;
        }

        .legend-color {
            width: 20px;
            height: 3px;
            border-radius: 2px;
        }

        .legend-color.revenus {
            background: #10b981;
        }

        .legend-color.depenses {
            background: #ef4444;
        }

        .legend-color.profit {
            background: #8b5cf6;
        }

        .legend-label {
            font-weight: 600;
        }

        .legend-value {
            color: #666;
            margin-left: auto;
        }

        #transactionsChart {
            width: 100% !important;
            height: 500px !important;
        }

        .logout-btn {
            padding: 10px 20px;
            background: #ef4444;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-weight: 600;
            transition: all 0.3s;
        }

        .logout-btn:hover {
            background: #dc2626;
        }

        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                align-items: stretch;
            }

            .view-switcher {
                width: 100%;
            }

            .view-btn {
                flex: 1;
                text-align: center;
            }

            .chart-legend {
                position: static;
                margin-bottom: 20px;
            }

            #transactionsChart {
                height: 400px !important;
            }

            .period-buttons {
                flex-direction: column;
            }

            .period-btn, .zoom-btn {
                width: 100%;
            }

            .zoom-btn {
                margin-left: 0;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- En-tête avec navigation -->
        <div class="header">
            <h1>📊 Analyse Financière</h1>
            <div class="view-switcher">
                <a href="/transactions" class="view-btn">📋 Vue Liste</a>
                <a href="/transactions/graph" class="view-btn active">📈 Vue Graphique</a>
            </div>
            <a href="/auth/logout" class="logout-btn">Déconnexion</a>
        </div>

        <!-- Statistiques -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-label">Solde Total</div>
                <div class="stat-value <%= solde >= 0 ? 'positive' : 'negative' %>">
                    <%= solde.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }) %>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Total Revenus</div>
                <div class="stat-value positive">
                    <%= totalRevenus.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }) %>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Total Dépenses</div>
                <div class="stat-value negative">
                    <%= totalDepenses.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }) %>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Nombre de Transactions</div>
                <div class="stat-value neutral">
                    <%= transactions.length %>
                </div>
            </div>
        </div>

        <!-- ✨ NOUVEAU : Contrôles de période -->
        <div class="period-controls">
            <div class="period-controls-title">📅 Période d'affichage</div>
            <div class="period-buttons">
                <button class="period-btn active" data-period="daily">📅 Journalier</button>
                <button class="period-btn" data-period="weekly">📅 Hebdomadaire</button>
                <button class="period-btn" data-period="monthly">📅 Mensuel</button>
                <button class="period-btn" data-period="yearly">📅 Annuel</button>
                <button class="zoom-btn" id="zoomBtn">🔍 Zoom</button>
            </div>
        </div>

        <!-- Filtres -->
        <div class="filters-section">
            <div class="filters-title">🔍 Filtres et Tri</div>
            <form method="GET" action="/transactions/graph">
                <div class="filters-grid">
                    <div class="filter-group">
                        <label for="type">Type</label>
                        <select name="type" id="type">
                            <option value="">Tous</option>
                            <option value="revenu" <%= filters.type === 'revenu' ? 'selected' : '' %>>Revenus</option>
                            <option value="depense" <%= filters.type === 'depense' ? 'selected' : '' %>>Dépenses</option>
                        </select>
                    </div>

                    <div class="filter-group">
                        <label for="categorie">Catégorie</label>
                        <select name="categorie" id="categorie">
                            <option value="">Toutes</option>
                            <% categories.forEach(cat => { %>
                                <option value="<%= cat.id %>" <%= filters.categorie == cat.id ? 'selected' : '' %>>
                                    <%= cat.nom %>
                                </option>
                            <% }); %>
                        </select>
                    </div>

                    <div class="filter-group">
                        <label for="date_debut">Date début</label>
                        <input type="date" name="date_debut" id="date_debut" value="<%= filters.date_debut || '' %>">
                    </div>

                    <div class="filter-group">
                        <label for="date_fin">Date fin</label>
                        <input type="date" name="date_fin" id="date_fin" value="<%= filters.date_fin || '' %>">
                    </div>
                </div>

                <div class="filter-actions">
                    <button type="submit" class="btn btn-primary">Appliquer les filtres</button>
                    <a href="/transactions/graph" class="btn btn-secondary">Réinitialiser</a>
                </div>
            </form>
        </div>

        <!-- Graphique -->
        <div class="chart-container">
            <div class="chart-legend">
                <div class="legend-item">
                    <div class="legend-color revenus"></div>
                    <span class="legend-label">Revenus</span>
                    <span class="legend-value"><%= totalRevenus.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }) %></span>
                </div>
                <div class="legend-item">
                    <div class="legend-color depenses"></div>
                    <span class="legend-label">Dépenses</span>
                    <span class="legend-value"><%= Math.abs(totalDepenses).toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }) %></span>
                </div>
                <div class="legend-item">
                    <div class="legend-color profit"></div>
                    <span class="legend-label">Profit</span>
                    <span class="legend-value"><%= solde.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }) %></span>
                </div>
            </div>
            <canvas id="transactionsChart"></canvas>
        </div>
    </div>

    <script>
        // ✅ FIX : Utiliser 'nature' au lieu de 'type'
        const transactions = <%- JSON.stringify(transactions) %>;
        
        // Variables globales
        let chart = null;
        let currentPeriod = 'daily';
        let isZoomed = false;

        // Boutons de période
        const periodButtons = document.querySelectorAll('.period-btn');
        const zoomBtn = document.getElementById('zoomBtn');

        periodButtons.forEach(btn => {
            btn.addEventListener('click', function() {
                periodButtons.forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                currentPeriod = this.dataset.period;
                isZoomed = false;
                zoomBtn.classList.remove('active');
                updateChart();
            });
        });

        zoomBtn.addEventListener('click', function() {
            isZoomed = !isZoomed;
            this.classList.toggle('active');
            updateChart();
        });

        function updateChart() {
            const data = prepareChartData(currentPeriod, isZoomed);
            
            if (chart) {
                chart.destroy();
            }

            const ctx = document.getElementById('transactionsChart').getContext('2d');
            chart = new Chart(ctx, {
                type: 'line',
                data: data,
                options: getChartOptions()
            });
        }

        function prepareChartData(period, zoomed) {
            // Trier les transactions par date
            const sortedTransactions = [...transactions].sort((a, b) => new Date(a.date) - new Date(b.date));

            let groupedData = {};
            let labels = [];

            const now = new Date();

            // Définir la plage de dates selon la période et le zoom
            let startDate, endDate;
            
            if (zoomed) {
                endDate = new Date();
                switch(period) {
                    case 'daily': // Aujourd'hui uniquement
                        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                        break;
                    case 'weekly': // Cette semaine
                        const dayOfWeek = now.getDay();
                        startDate = new Date(now);
                        startDate.setDate(now.getDate() - dayOfWeek);
                        break;
                    case 'monthly': // Ce mois (30 derniers jours)
                        startDate = new Date(now);
                        startDate.setDate(now.getDate() - 30);
                        break;
                    case 'yearly': // Cette année
                        startDate = new Date(now.getFullYear(), 0, 1);
                        break;
                }
            } else {
                endDate = new Date();
                switch(period) {
                    case 'daily': // 36 derniers jours
                        startDate = new Date(now);
                        startDate.setDate(now.getDate() - 36);
                        break;
                    case 'weekly': // 36 dernières semaines
                        startDate = new Date(now);
                        startDate.setDate(now.getDate() - (36 * 7));
                        break;
                    case 'monthly': // 36 derniers mois
                        startDate = new Date(now);
                        startDate.setMonth(now.getMonth() - 36);
                        break;
                    case 'yearly': // 36 dernières années
                        startDate = new Date(now);
                        startDate.setFullYear(now.getFullYear() - 36);
                        break;
                }
            }

            // Filtrer les transactions dans la plage
            const filteredTransactions = sortedTransactions.filter(t => {
                const tDate = new Date(t.date);
                return tDate >= startDate && tDate <= endDate;
            });

            // Grouper par période
            filteredTransactions.forEach(t => {
                const date = new Date(t.date);
                let key;

                switch(period) {
                    case 'daily':
                        key = date.toISOString().split('T')[0];
                        break;
                    case 'weekly':
                        const weekStart = new Date(date);
                        weekStart.setDate(date.getDate() - date.getDay());
                        key = weekStart.toISOString().split('T')[0];
                        break;
                    case 'monthly':
                        key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
                        break;
                    case 'yearly':
                        key = `${date.getFullYear()}`;
                        break;
                }

                if (!groupedData[key]) {
                    groupedData[key] = { revenus: 0, depenses: 0, profit: 0 };
                }

                const montant = parseFloat(t.montant);
                // ✅ FIX : Utiliser 'nature' au lieu de 'type'
                if (t.nature === 'revenu') {
                    groupedData[key].revenus += montant;
                    groupedData[key].profit += montant;
                } else {
                    groupedData[key].depenses += Math.abs(montant);
                    groupedData[key].profit -= Math.abs(montant);
                }
            });

            // Créer les labels et données cumulatives
            const dates = Object.keys(groupedData).sort();
            let cumulativeRevenus = 0;
            let cumulativeDepenses = 0;
            let cumulativeProfit = 0;

            labels = dates.map(date => {
                switch(period) {
                    case 'daily':
                        return new Date(date).toLocaleDateString('fr-FR', { day: '2-digit', month: 'short' });
                    case 'weekly':
                        return `S${Math.ceil((new Date(date).getDate()) / 7)} ${new Date(date).toLocaleDateString('fr-FR', { month: 'short' })}`;
                    case 'monthly':
                        const [year, month] = date.split('-');
                        return new Date(year, month - 1).toLocaleDateString('fr-FR', { month: 'short', year: 'numeric' });
                    case 'yearly':
                        return date;
                }
            });

            const revenusData = dates.map(date => {
                cumulativeRevenus += groupedData[date].revenus;
                return cumulativeRevenus;
            });

            const depensesData = dates.map(date => {
                cumulativeDepenses += groupedData[date].depenses;
                return cumulativeDepenses;
            });

            const profitData = dates.map(date => {
                cumulativeProfit += groupedData[date].profit;
                return cumulativeProfit;
            });

            return {
                labels: labels,
                datasets: [
                    {
                        label: 'Revenus',
                        data: revenusData,
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        borderWidth: 3,
                        tension: 0.4,
                        fill: false,
                        pointRadius: 4,
                        pointHoverRadius: 6
                    },
                    {
                        label: 'Dépenses',
                        data: depensesData,
                        borderColor: '#ef4444',
                        backgroundColor: 'rgba(239, 68, 68, 0.1)',
                        borderWidth: 3,
                        tension: 0.4,
                        fill: false,
                        pointRadius: 4,
                        pointHoverRadius: 6
                    },
                    {
                        label: 'Profit',
                        data: profitData,
                        borderColor: '#8b5cf6',
                        backgroundColor: 'rgba(139, 92, 246, 0.1)',
                        borderWidth: 3,
                        tension: 0.4,
                        fill: false,
                        pointRadius: 4,
                        pointHoverRadius: 6
                    }
                ]
            };
        }

        function getChartOptions() {
            return {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    mode: 'index',
                    intersect: false,
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        padding: 12,
                        titleFont: {
                            size: 14
                        },
                        bodyFont: {
                            size: 13
                        },
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                label += new Intl.NumberFormat('fr-FR', {
                                    style: 'currency',
                                    currency: 'EUR'
                                }).format(context.parsed.y);
                                return label;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        grid: {
                            display: false
                        },
                        ticks: {
                            maxRotation: 45,
                            minRotation: 45,
                            font: {
                                size: 11
                            }
                        }
                    },
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)'
                        },
                        ticks: {
                            callback: function(value) {
                                return new Intl.NumberFormat('fr-FR', {
                                    style: 'currency',
                                    currency: 'EUR',
                                    minimumFractionDigits: 0,
                                    maximumFractionDigits: 0
                                }).format(value);
                            },
                            font: {
                                size: 12
                            }
                        }
                    }
                }
            };
        }

        // Initialiser le graphique au chargement
        updateChart();
    </script>
</body>
</html>
