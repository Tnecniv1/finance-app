<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Graphiques - Finance App</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            background: white;
            padding: 20px 30px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            color: #333;
            font-size: 28px;
        }

        .nav-buttons {
            display: flex;
            gap: 10px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            text-decoration: none;
            display: inline-block;
            transition: all 0.3s;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5568d3;
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: #e0e7ff;
            color: #667eea;
        }

        .btn-secondary:hover {
            background: #c7d2fe;
        }

        /* Filters Section */
        .filters-container {
            background: white;
            padding: 20px 30px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .filters-row {
            display: flex;
            gap: 30px;
            align-items: center;
            flex-wrap: wrap;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .filter-group label {
            font-weight: 600;
            color: #333;
            font-size: 14px;
        }

        .filter-buttons {
            display: flex;
            gap: 10px;
        }

        .filter-btn {
            padding: 8px 16px;
            border: 2px solid #e0e7ff;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            color: #667eea;
            transition: all 0.3s;
            font-weight: 500;
        }

        .filter-btn:hover {
            border-color: #667eea;
            background: #f5f7ff;
        }

        .filter-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        /* Chart Container */
        .chart-container {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .chart-wrapper {
            position: relative;
            height: 500px;
        }

        /* Stats Cards */
        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .stat-card h3 {
            color: #666;
            font-size: 14px;
            margin-bottom: 10px;
        }

        .stat-card .value {
            font-size: 28px;
            font-weight: bold;
        }

        .stat-card.positive .value {
            color: #10b981;
        }

        .stat-card.negative .value {
            color: #ef4444;
        }

        .stat-card.neutral .value {
            color: #667eea;
        }

        /* Legend */
        .legend-container {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #e5e7eb;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 4px;
        }

        .legend-label {
            font-size: 14px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>üìä Graphiques Financiers</h1>
            <div class="nav-buttons">
                <a href="/transactions" class="btn btn-secondary">‚Üê Retour</a>
                <form action="/auth/logout" method="POST" style="display: inline;">
                    <button type="submit" class="btn btn-primary">D√©connexion</button>
                </form>
            </div>
        </div>

        <!-- Filters -->
        <div class="filters-container">
            <div class="filters-row">
                <div class="filter-group">
                    <label>P√©riode</label>
                    <div class="filter-buttons">
                        <button class="filter-btn active" data-filter="period" data-value="daily">Journalier</button>
                        <button class="filter-btn" data-filter="period" data-value="weekly">Hebdomadaire</button>
                        <button class="filter-btn" data-filter="period" data-value="monthly">Mensuel</button>
                        <button class="filter-btn" data-filter="period" data-value="yearly">Annuel</button>
                    </div>
                </div>

                <div class="filter-group">
                    <label>Type</label>
                    <div class="filter-buttons">
                        <button class="filter-btn active" data-filter="type" data-value="profit">Profit</button>
                        <button class="filter-btn" data-filter="type" data-value="revenus">Revenus</button>
                        <button class="filter-btn" data-filter="type" data-value="depenses">D√©penses</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="stats-container">
            <div class="stat-card positive">
                <h3>Total Revenus</h3>
                <div class="value" id="total-revenus">0 ‚Ç¨</div>
            </div>
            <div class="stat-card negative">
                <h3>Total D√©penses</h3>
                <div class="value" id="total-depenses">0 ‚Ç¨</div>
            </div>
            <div class="stat-card neutral">
                <h3>Solde</h3>
                <div class="value" id="solde">0 ‚Ç¨</div>
            </div>
        </div>

        <!-- Chart -->
        <div class="chart-container">
            <div class="chart-wrapper">
                <canvas id="financeChart"></canvas>
            </div>
            <div class="legend-container" id="customLegend"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Current filters state
        let currentFilters = {
            period: 'daily',
            type: 'profit'
        };

        // Raw transactions data
        const transactions = <%- JSON.stringify(transactions) %>;
        const categoriesRevenus = <%- JSON.stringify(categoriesRevenus) %>;
        const categoriesDepenses = <%- JSON.stringify(categoriesDepenses) %>;

        let chart = null;

        // Filter button handlers
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const filterType = this.dataset.filter;
                const value = this.dataset.value;

                // Update active state
                document.querySelectorAll(`[data-filter="${filterType}"]`).forEach(b => {
                    b.classList.remove('active');
                });
                this.classList.add('active');

                // Update filters
                currentFilters[filterType] = value;

                // Refresh chart
                updateChart();
            });
        });

        // Format currency
        function formatCurrency(amount) {
            return new Intl.NumberFormat('fr-FR', {
                style: 'currency',
                currency: 'EUR'
            }).format(amount);
        }

        // Get date labels based on period
        function getDateLabels(period) {
            const labels = [];
            const now = new Date();

            for (let i = 11; i >= 0; i--) {
                const date = new Date(now);
                
                switch(period) {
                    case 'daily':
                        date.setDate(date.getDate() - i);
                        labels.push(date.toLocaleDateString('fr-FR', { day: '2-digit', month: '2-digit' }));
                        break;
                    case 'weekly':
                        date.setDate(date.getDate() - (i * 7));
                        const weekStart = new Date(date);
                        weekStart.setDate(date.getDate() - date.getDay() + 1);
                        labels.push(`S${getWeekNumber(weekStart)}`);
                        break;
                    case 'monthly':
                        date.setMonth(date.getMonth() - i);
                        labels.push(date.toLocaleDateString('fr-FR', { month: 'short', year: '2-digit' }));
                        break;
                    case 'yearly':
                        date.setFullYear(date.getFullYear() - i);
                        labels.push(date.getFullYear().toString());
                        break;
                }
            }

            return labels;
        }

        // Get week number
        function getWeekNumber(date) {
            const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
            const dayNum = d.getUTCDay() || 7;
            d.setUTCDate(d.getUTCDate() + 4 - dayNum);
            const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
            return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
        }

        // Get date range for a period point
        function getDateRangeForPoint(index, period) {
            const now = new Date();
            const pointIndex = 11 - index;
            let start, end;

            switch(period) {
                case 'daily':
                    start = new Date(now);
                    start.setDate(now.getDate() - pointIndex);
                    start.setHours(0, 0, 0, 0);
                    end = new Date(start);
                    end.setHours(23, 59, 59, 999);
                    break;
                case 'weekly':
                    start = new Date(now);
                    start.setDate(now.getDate() - (pointIndex * 7));
                    start.setDate(start.getDate() - start.getDay() + 1);
                    start.setHours(0, 0, 0, 0);
                    end = new Date(start);
                    end.setDate(start.getDate() + 6);
                    end.setHours(23, 59, 59, 999);
                    break;
                case 'monthly':
                    start = new Date(now);
                    start.setMonth(now.getMonth() - pointIndex);
                    start.setDate(1);
                    start.setHours(0, 0, 0, 0);
                    end = new Date(start);
                    end.setMonth(start.getMonth() + 1);
                    end.setDate(0);
                    end.setHours(23, 59, 59, 999);
                    break;
                case 'yearly':
                    start = new Date(now);
                    start.setFullYear(now.getFullYear() - pointIndex);
                    start.setMonth(0, 1);
                    start.setHours(0, 0, 0, 0);
                    end = new Date(start);
                    end.setFullYear(start.getFullYear() + 1);
                    end.setMonth(0, 0);
                    end.setHours(23, 59, 59, 999);
                    break;
            }

            return { start, end };
        }

        // Process transactions data
        function processTransactions() {
            const period = currentFilters.period;
            const type = currentFilters.type;
            const labels = getDateLabels(period);

            if (type === 'profit') {
                return processProfitData(labels, period);
            } else if (type === 'revenus') {
                return processRevenusData(labels, period);
            } else {
                return processDepensesData(labels, period);
            }
        }

        // Process profit data (3 simple lines)
        function processProfitData(labels, period) {
            const revenus = new Array(12).fill(0);
            const depenses = new Array(12).fill(0);

            transactions.forEach(t => {
                const tDate = new Date(t.date);
                
                for (let i = 0; i < 12; i++) {
                    const { start, end } = getDateRangeForPoint(i, period);
                    
                    if (tDate >= start && tDate <= end) {
                        if (t.nature === 'revenu') {
                            revenus[i] += parseFloat(t.montant);
                        } else {
                            depenses[i] += parseFloat(t.montant);
                        }
                    }
                }
            });

            const profit = revenus.map((r, i) => r - depenses[i]);

            return {
                labels,
                datasets: [
                    {
                        label: 'Revenus',
                        data: revenus,
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        borderWidth: 2,
                        fill: false,
                        tension: 0.4
                    },
                    {
                        label: 'D√©penses',
                        data: depenses,
                        borderColor: '#ef4444',
                        backgroundColor: 'rgba(239, 68, 68, 0.1)',
                        borderWidth: 2,
                        fill: false,
                        tension: 0.4
                    },
                    {
                        label: 'Profit',
                        data: profit,
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        borderWidth: 2,
                        fill: false,
                        tension: 0.4
                    }
                ]
            };
        }

        // Process revenus data with categories (stacked)
        function processRevenusData(labels, period) {
            // Map category ID to name
            const categoryMap = {};
            categoriesRevenus.forEach(cat => {
                categoryMap[cat.id] = cat.nom;
            });

            // Initialize data structure for each category
            const categoryData = {};
            categoriesRevenus.forEach(cat => {
                categoryData[cat.id] = new Array(12).fill(0);
            });

            // Process transactions
            transactions.forEach(t => {
                if (t.nature === 'revenu' && t.sous_categorie_revenu && t.sous_categorie_revenu.categorie_revenu_id) {
                    const tDate = new Date(t.date);
                    const categorieId = t.sous_categorie_revenu.categorie_revenu_id;
                    
                    for (let i = 0; i < 12; i++) {
                        const { start, end } = getDateRangeForPoint(i, period);
                        
                        if (tDate >= start && tDate <= end) {
                            if (categoryData[categorieId]) {
                                categoryData[categorieId][i] += parseFloat(t.montant);
                            }
                        }
                    }
                }
            });

            // Create datasets (stacked area chart)
            const colors = [
                { border: '#10b981', bg: 'rgba(16, 185, 129, 0.5)' },
                { border: '#3b82f6', bg: 'rgba(59, 130, 246, 0.5)' },
                { border: '#8b5cf6', bg: 'rgba(139, 92, 246, 0.5)' },
                { border: '#ec4899', bg: 'rgba(236, 72, 153, 0.5)' },
                { border: '#f59e0b', bg: 'rgba(245, 158, 11, 0.5)' },
                { border: '#06b6d4', bg: 'rgba(6, 182, 212, 0.5)' },
                { border: '#84cc16', bg: 'rgba(132, 204, 22, 0.5)' }
            ];

            const datasets = [];
            let colorIndex = 0;

            Object.keys(categoryData).forEach(catId => {
                const color = colors[colorIndex % colors.length];
                datasets.push({
                    label: categoryMap[catId],
                    data: categoryData[catId],
                    borderColor: color.border,
                    backgroundColor: color.bg,
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4,
                    stack: 'revenus'
                });
                colorIndex++;
            });

            return { labels, datasets };
        }

        // Process depenses data with categories (stacked)
        function processDepensesData(labels, period) {
            // Map category ID to name
            const categoryMap = {};
            categoriesDepenses.forEach(cat => {
                categoryMap[cat.id] = cat.nom;
            });

            // Initialize data structure for each category
            const categoryData = {};
            categoriesDepenses.forEach(cat => {
                categoryData[cat.id] = new Array(12).fill(0);
            });

            // Process transactions
            transactions.forEach(t => {
                if (t.nature === 'depense' && t.sous_categorie_depense && t.sous_categorie_depense.categorie_depense_id) {
                    const tDate = new Date(t.date);
                    const categorieId = t.sous_categorie_depense.categorie_depense_id;
                    
                    for (let i = 0; i < 12; i++) {
                        const { start, end } = getDateRangeForPoint(i, period);
                        
                        if (tDate >= start && tDate <= end) {
                            if (categoryData[categorieId]) {
                                categoryData[categorieId][i] += parseFloat(t.montant);
                            }
                        }
                    }
                }
            });

            // Create datasets (stacked area chart)
            const colors = [
                { border: '#ef4444', bg: 'rgba(239, 68, 68, 0.5)' },
                { border: '#f97316', bg: 'rgba(249, 115, 22, 0.5)' },
                { border: '#eab308', bg: 'rgba(234, 179, 8, 0.5)' },
                { border: '#84cc16', bg: 'rgba(132, 204, 22, 0.5)' },
                { border: '#06b6d4', bg: 'rgba(6, 182, 212, 0.5)' },
                { border: '#8b5cf6', bg: 'rgba(139, 92, 246, 0.5)' },
                { border: '#ec4899', bg: 'rgba(236, 72, 153, 0.5)' }
            ];

            const datasets = [];
            let colorIndex = 0;

            Object.keys(categoryData).forEach(catId => {
                const color = colors[colorIndex % colors.length];
                datasets.push({
                    label: categoryMap[catId],
                    data: categoryData[catId],
                    borderColor: color.border,
                    backgroundColor: color.bg,
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4,
                    stack: 'depenses'
                });
                colorIndex++;
            });

            return { labels, datasets };
        }

        // Update stats
        function updateStats() {
            let totalRevenus = 0;
            let totalDepenses = 0;

            transactions.forEach(t => {
                if (t.nature === 'revenu') {
                    totalRevenus += parseFloat(t.montant);
                } else {
                    totalDepenses += parseFloat(t.montant);
                }
            });

            document.getElementById('total-revenus').textContent = formatCurrency(totalRevenus);
            document.getElementById('total-depenses').textContent = formatCurrency(totalDepenses);
            
            const solde = totalRevenus - totalDepenses;
            const soldeElement = document.getElementById('solde');
            soldeElement.textContent = formatCurrency(solde);
            
            const soldeCard = soldeElement.closest('.stat-card');
            soldeCard.classList.remove('positive', 'negative', 'neutral');
            if (solde > 0) {
                soldeCard.classList.add('positive');
            } else if (solde < 0) {
                soldeCard.classList.add('negative');
            } else {
                soldeCard.classList.add('neutral');
            }
        }

        // Update chart
        function updateChart() {
            const chartData = processTransactions();

            if (chart) {
                chart.destroy();
            }

            const ctx = document.getElementById('financeChart').getContext('2d');
            
            chart = new Chart(ctx, {
                type: 'line',
                data: chartData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return context.dataset.label + ': ' + formatCurrency(context.parsed.y);
                                }
                            }
                        },
                        filler: {
                            propagate: true
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            stacked: currentFilters.type !== 'profit',
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return formatCurrency(value);
                                }
                            }
                        }
                    },
                    elements: {
                        line: {
                            tension: 0.4
                        }
                    }
                }
            });

            // Update custom legend
            updateLegend(chartData.datasets);
        }

        // Update custom legend
        function updateLegend(datasets) {
            const legendContainer = document.getElementById('customLegend');
            legendContainer.innerHTML = '';

            datasets.forEach(dataset => {
                const item = document.createElement('div');
                item.className = 'legend-item';

                const color = document.createElement('div');
                color.className = 'legend-color';
                color.style.backgroundColor = dataset.borderColor;

                const label = document.createElement('span');
                label.className = 'legend-label';
                label.textContent = dataset.label;

                item.appendChild(color);
                item.appendChild(label);
                legendContainer.appendChild(item);
            });
        }

        // Initialize
        updateStats();
        updateChart();
    </script>
</body>
</html>
